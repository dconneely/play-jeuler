package com.davidconneely.jeuler.p002;

import java.util.NoSuchElementException;
import java.util.PrimitiveIterator;
import java.util.Spliterators;
import java.util.function.IntPredicate;
import java.util.stream.IntStream;
import java.util.stream.StreamSupport;

/**
 * -
 * <h3>Even Fibonacci numbers</h3>
 * <h4>Problem 2</h4>
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10
 * terms will be:
 * <blockquote>1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...</blockquote>
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued
 * terms.
 */
public class EvenFibonacciNumbers_8 {
    public static void main(String[] args) {
        System.out.println(sum(4_000_000));
    }

    // upperBound is inclusive.
    static long sum(int upperBound) {
        return FibonacciIntStream.takeWhile(n -> (n <= upperBound)).filter(n -> (n % 2 == 0)).sum();
    }

    private static abstract class FibonacciIntStream {
        // Fibonacci sequence is potentially infinite, so take while a predicate holds, then terminate.
        static IntStream takeWhile(IntPredicate pred) {
            // Converting an iterator into a stream is more complicated than you'd expect.
            return StreamSupport.intStream(Spliterators.spliteratorUnknownSize(new IntIterator(pred), 0), false);
        }

        private static class IntIterator implements PrimitiveIterator.OfInt {
            private int m2 = 0;
            private int m1 = 1;
            private IntPredicate pred;

            IntIterator(IntPredicate pred) {
                this.pred = pred;
            }

            @Override
            public boolean hasNext() {
                return pred.test(m2 + m1);
            }

            @Override
            public int nextInt() {
                if (!hasNext()) {
                    throw new NoSuchElementException();
                }
                int m3 = m2;
                m2 = m1;
                m1 = m3 + m2;
                return m1;
            }
        }
    }
}
